- set_fact:
    rb_pkgs: zlib1g-dev libssl-dev libreadline-dev
    rb_ver_regex: ^[0-9]\.[0-9]+\.[0-9]+

- name: rbenv | check version format
  set_fact: # True: 2.4.1 | False: 2.4 or blank
    is_rb_ver_format: "{{ rb_ver | default('') | regex_search(rb_ver_regex) }}"

- name: rbenv | req
  apt: pkg={{ rb_pkgs.split(' ') }} update_cache=yes
  become: yes

- name: rbenv | clone
  git: repo=https://github.com/rbenv/rbenv.git dest=~/.rbenv

- name: rbenv | bashrc
  lineinfile: "{{ item }}"
  loop:
  - { path: ~/.bashrc, line: 'export PATH="$HOME/.rbenv/bin:$PATH"' }
  - { path: ~/.bashrc, line: 'eval "$(rbenv init -)"' }

- name: rbenv | ruby-build
  git: repo=https://github.com/rbenv/ruby-build.git dest=~/.rbenv/plugins/ruby-build

- name: rbenv | ruby ver
  shell: ~/.rbenv/bin/rbenv install -l | egrep {{ rb_ver_regex }} | tail -1
  register: reg_rb_latest
  changed_when: no
  when: not is_rb_ver_format

- name: rbenv | ruby ver set
  set_fact:
    rb_ver: "{{ reg_rb_latest.stdout }}"
  when: not is_rb_ver_format

- name: rbenv | ruby check
  shell: ~/.rbenv/bin/rbenv versions | grep {{ rb_ver }}
  register: reg_rbenv_vers
  changed_when: no
  failed_when: no

- name: rbenv | ruby install
  shell: ~/.rbenv/bin/rbenv install {{ rb_ver }} && ~/.rbenv/bin/rbenv global {{ rb_ver }}
  register: reg_rbenv_install
  when: reg_rbenv_vers.rc == 1

- name: rbenv | gemrc no doc
  copy: "dest=~/.gemrc content='gem: --no-document'"
  
- name: rbenv | awesome_print install
  shell: ~/.rbenv/shims/gem install awesome_print
  when: reg_rbenv_install.changed
  
- name: rbenv | irbrc
  blockinfile:
    block: |
      # awesome print
      begin
        require 'irb/completion'
        require 'awesome_print'
        AwesomePrint.irb!
      rescue LoadError => err
        warn "Couldn't load awesome_print: #{err}"
      end

      # irb history
      IRB.conf[:EVAL_HISTORY] = 10000
      IRB.conf[:SAVE_HISTORY] = 100000
      IRB.conf[:HISTORY_FILE] = File::expand_path("~/.irb_history")
      IRB.conf[:USE_MULTILINE] = false

      # load .railsrc in rails environments
      railsrc_path = File.expand_path('~/.irbrc_rails')
      if ( ENV['RAILS_ENV'] || defined? Rails ) && File.exist?( railsrc_path )
        begin
          load railsrc_path
        rescue Exception
          warn "Could not load: #{ railsrc_path } because of #{$!.message}"
        end
      end

      class Object
        def interesting_methods
          case self.class
          when Class
            self.public_methods.sort - Object.public_methods
          when Module
            self.public_methods.sort - Module.public_methods
          else
            self.public_methods.sort - Object.new.public_methods
          end
        end
      end

      module Kernel
        def require_relative(file)
          $:.unshift Dir.pwd
          require file
        end

        def guid(s)
          s.scan(/[a-f0-9-]{36}/).first
        end
      end
    dest: ~/.irbrc
    backup: yes
